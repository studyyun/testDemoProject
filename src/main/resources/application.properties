server.port=9990

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
#spring.datasource.url=jdbc:mysql://192.168.3.176:3306/neimenggu?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=123456


mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.configuration.auto-mapping-behavior=full
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis-plus.mapper-locations=classpath*:mapper/**/*Mapper.xml

mailgate.account.cache.time=180

logging.config=classpath:log4j2.xml

############## oauth2\u914D\u7F6E\u4FE1\u606F ##############
# \u552F\u4E00\u6807\u8BC6id\uFF0C\u5BA2\u6237\u63D0\u4F9B
oauth2.client_id=c3
# \u5BC6\u94A5\uFF0C\u5BA2\u6237\u63D0\u4F9B
oauth2.client_secret=secret
# \u83B7\u53D6code\u6388\u6743\u7801\u5730\u5740\uFF0C\u5BA2\u6237\u63D0\u4F9B
oauth2.code_uri=http://192.169.1.176:8002/oauth/authorize
# \u83B7\u53D6token\u4EE4\u724C\u5730\u5740\uFF0C\u5BA2\u6237\u63D0\u4F9B
oauth2.token_uri=http://192.169.1.176:8002/oauth/token
# SSO\u6CE8\u9500\u5730\u5740\uFF0C\u5BA2\u6237\u63D0\u4F9B
oauth2.logout_uri=http://192.169.1.176:8002/oauth/check_token

#server.ssl.key-store=classpath:client.p12
#server.ssl.key-store-password=12345678
#server.ssl.key-store-type=PKCS12
#server.ssl.key-alias=client
#

demo.name=ooo
demo.age=11


###########【Kafka集群】###########
spring.kafka.bootstrap-servers=192.168.3.129:9092
###########【初始化生产者配置】###########
# 重试次数
spring.kafka.producer.retries=0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks=1
# 批量大小 单位：KB
spring.kafka.producer.batch-size=2000
# 提交延时 单位：ms
spring.kafka.producer.properties.linger.ms=6000
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了​
# 生产端缓冲区大小
spring.kafka.producer.buffer-memory = 33554432
# Kafka提供的序列化和反序列化类
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# 自定义分区器
spring.kafka.producer.properties.partitioner.class=com.example.demo.kafka.producer.CustomizePartitioner
# 自定义拦截器
spring.kafka.producer.interceptor.class=com.example.demo.kafka.producer.CustomizeInterceptors
###########【初始化消费者配置】###########
# 默认的消费组ID
spring.kafka.consumer.properties.group.id=defaultConsumerGroup
# 是否自动提交offset
spring.kafka.consumer.enable-auto-commit=true
# 提交offset延时(接收到消息后多久提交offset)
#spring.kafka.consumer.auto.commit.interval.ms=1000
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:重置为分区中最小的offset;
# latest:重置为分区中最新的offset(消费分区中新产生的数据);
# none:只要有一个分区不存在已提交的offset,就抛出异常;
spring.kafka.consumer.auto-offset-reset=latest
# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
spring.kafka.consumer.properties.session.timeout.ms=120000
# 消费请求超时时间
spring.kafka.consumer.properties.request.timeout.ms=180000
# Kafka提供的序列化和反序列化类
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 消费端监听的topic不存在时，项目启动会报错(关掉)
spring.kafka.listener.missing-topics-fatal=false
# 设置批量消费
#spring.kafka.listener.type=batch
# 批量消费每次最多消费多少条消息
spring.kafka.consumer.max-poll-records=10

spring.kafka.listener.poll-timeout=10000
spring.kafka.consumer.auto-commit-interval=10000
